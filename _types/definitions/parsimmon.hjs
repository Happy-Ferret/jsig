
-- type Parser<T> : {
--     then: <T, S>(this: Parser<T>, other: Parser<S>) => Parser<S>,
--     skip: <T, S>(this: Parser<T>, other: Parser<S>) => Parser<T>,
--     many: <T>(this: Parser<T>) => Parser<Array<T>>,
--     map: <T, S>(this: Parser<T>, fn: (T) => S) => Parser<S>
-- }

interface Parser {
    then(other: Parser) => Parser,
    skip(other: Parser) => Parser,
    many() => Parser,
    map(
        fn: (Mixed) => Mixed
    ) => Parser
}

type Result : {
    status: Boolean,
    index?: {
        line: Number
    }
}

type Parsimmon : {
    optWhitespace: Parser,
    regex: (RegExp) => Parser,
    string: (String) => Parser,

    formatError: (source: String, res: Result) => void
}

parsimmon : Parsimmon
